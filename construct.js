import store from "/store.js";
export default 
{
    //This module is for methods that construct html and objects
    
    mainPage:function()
    {
        return `<header>
        <h1>Bookmark App</h1>
        <form action="">
            <button id="btn-new">+ New ðŸ”–</button>
            <select name="select-filter" id="select-filter">
                <option value="0" ${this.defaultSelected(0)}>Filter By:</option>
                <option value="1" ${this.defaultSelected(1)}>â˜…â˜†â˜†â˜†â˜†</option>
                <option value="2" ${this.defaultSelected(2)}>â˜…â˜…â˜†â˜†â˜†</option>
                <option value="3" ${this.defaultSelected(3)}>â˜…â˜…â˜…â˜†â˜†</option>
                <option value="4" ${this.defaultSelected(4)}>â˜…â˜…â˜…â˜…â˜†</option>
                <option value="5" ${this.defaultSelected(5)}>â˜…â˜…â˜…â˜…â˜…</option>
            </select>
        </form>
    </header>
    <main>
        <div id="bookmarks-container">
            ${store.getBookmarks()}
        </div>
    </main>`;
    },
    submitPage:function()
    {
        return `<header>
        <h1>Bookmark App</h1>
        <form id="input-bookmark" action="">
            <label class="add-bookmarks-label" for="url">Add New Bookmark:</label>
            <input class="add-bookmarks-input" name="url" id="url" type="url" value="${store.newBookmark.url}" placeholder="http://example.com"></input>
            <div id="info-container">
                <div id="rating-selector">

                    <!--Generated by rating selection generator-->
                    ${this.ratingStarBtns(store.ratingSelector)}


                </div>
            
            <input class="add-bookmarks-input" name="title" id="title" type="text" value="${store.newBookmark.title}" placeholder="Enter a name:"></input>
            <textarea id="addbookmark-desc" class="add-bookmarks-input"  type="text" placeholder="Description Text.">${store.newBookmark.desc}</textarea>
            </div>   
            <div id="btn-container"><button id="btn-cancel" class="btn" type="button">Cancel</button>
            <button id="btn-create" class="btn" type="submit">Submit</button></div>
        </form>
    </header>
    <div id="error-containter" ${this.hide(store.error)}>${store.errorMessage}</div>`;
    },
    
    //Constructing a row of stars based on the supplied rating.    
    ratingStars: function(rating)
    {
        let stars = "";
        for(let i = 0; i<5; i++)
        {
            
            if(i<rating)
            {
                stars += "â˜…";
            }
            else
            {
                stars += "â˜†";
            }
        }
        return stars;
    },
    ratingStarBtns: function(rating)
    {
        let stars = "";
        for(let i = 0; i<5; i++)
        {
            
            if(i<rating)
            {
                stars += `<button class="star-btn" value="${i+1}">â˜…</button>`;
            }
            else
            {
                stars += `<button class="star-btn" value="${i+1}">â˜†</button>`;
            }
            
        }
        
        
        return stars;
        
    },
    //Building a single bookmark.
    bookmark:function(bookmarkObj)
    {
        if(bookmarkObj.rating >= store.filter)
        {
            return `
            <div id="${bookmarkObj.id}" class="bookmark">
                <button><div><p class="title">${bookmarkObj.title}</p></div><div>  ${this.expandButtons(bookmarkObj)}  </div></button>
                
            </div>
            <span class="expanded-view" ${this.hide(bookmarkObj.expanded)}>
                    <button class="visit-site btn" value="${bookmarkObj.url}">Visit Site</button>
                    <p>${bookmarkObj.desc}</p>
                </span>
        `;
        }
        else
        {
            return "";
        }
    },
    //Join an array of the above bookmarks into one html string.
    bookmarks:function(bookmarksArry)
    {
        let html = ""
        bookmarksArry.forEach(bookmarkElement => {
            
            html += this.bookmark(bookmarkElement);
        });
        
        return html;
    }
    ,
    hide:function(toggle)
    {
        if(!toggle)
        {
            return `style='display:none;' hidden`;
        }
        else
        {
            return ``;
        }
    },
    expandButtons:function(bookmark)
    {
        if(bookmark.expanded)
        {
            return '<button class="trash-btn">ðŸ—‘</button>';
        }
        else
        {
            return `<p class="rating">${this.ratingStars(bookmark.rating)}</p>`;
        }
    },
    defaultSelected:function(filter)
    {
        if(store.filter == filter)
        {
            return `selected`;
        }
        else
        {
            return ``;
        }

    },postData:function(body)
    {
        return {
            method: 'POST', 
            headers: {
              'Content-Type': 'application/json'
              
            },
            body: JSON.stringify(body)
          };
    },
    delData:function(id)
    {
        return {
            method: 'DELETE', 
            headers: {
              'Content-Type': 'application/json'
              
            }, 
            body: JSON.stringify({"title":id})
          };
    },
    getNewBookmark:function()
    {
        let title = $("#title").val();
        let url = $("#url").val();
        let desc = $("#addbookmark-desc").val();
        let rating = store.ratingSelector;
        return{"title":title,"url":url,"desc":desc,"rating":rating};
    }


    


}